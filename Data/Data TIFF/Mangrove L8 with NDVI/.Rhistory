pline <- st_read("H:/Wildfire_datasets/PROCESSING/GRID/AOI_LiDAR.shp")
gline <- st_read("H:/Wildfire_datasets/PROCESSING/GRID/AOI-Grid21.shp")
# select which tile
plineROI206 = pline %>% filter(fname == "ROI206")
# select the grid
glineROI206 = gline[plineROI206, op=st_within]
# add ID for selection
glineROI206$gridID <- 1:nrow(glineROI206) # gile, langsung jadi sf
st_write(glineROI206, "H:/Wildfire_datasets/PROCESSING/GRID/gline/glineROI206_sf.shp")
# select the first grid
gROI206 = glineROI206 %>% filter(gridID == 1)
# extent
startX <- raster::extent(gROI206)[1]
startY <- raster::extent(gROI206)[3]
ccover = grid_metrics(ROI206_0, res=30, start = c(startX, startY),
func =  CC(Z, hTree = 5, ReturnNumber, NumberOfReturns, Classification))
plot(ccover$ARCI)
plot(ccover$FRCI)
plot(ccover)
head(ccover$ARCI)
#view(ccover$ARCI)
shp <- ccover %>%
rasterToPoints %>%
as.data.frame %>%
sf::st_as_sf(coords = c("x","y"), crs=32748)
write_sf(shp, "H:/Wildfire_datasets/PROCESSING/CANOPY COVER/CC_ROI206.shp", delete_layer = TRUE)
save.image("H:/Wildfire_datasets/PROCESSING/CANOPY COVER/HASIL/ROI206.RData")
# 4. load the data ----
ROI207 <- readLAS ("H:/Wildfire_datasets/PROCESSING/CLASSIFICATION/ROI207_CLASS.las")
# 5. Membaca metadata file las ----
ROI207
# 6. Menampilkan 3D data las
plot(ROI207)
# 7. Mengecek kualitas data las ----
lascheck(ROI207)
# Pengurangan Kerapatan point clouds dengan menggunakan beberapa algoritma ----
#ROI41_dec <- lasfilterdecimate(ROI41,
#algorithm = homogenize(density = 3L, res = 1))
#las.clip
#las.thin
#lascheck(ROI41_dec)
# Filtering point clouds yang double XYZ
ROI207_dup <- lasfilterduplicates(ROI207)
ROI207_data<- lasfilter(ROI207_dup, !duplicated(ROI207_dup@data, by = c("X", "Y")))
ROI207_dup
lascheck(ROI207_data)
unique(ROI207_data@data$Classification)
table(ROI207_data@data$Classification)
# Digital terrain Model (DTM)
dtm <- grid_terrain(ROI207_data, algorithm = kriging(k=10L), res = 0.5)
writeRaster(dtm, "H:/Wildfire_datasets/PROCESSING/DTM/ROI207_dtm.tif", overwrite=TRUE)
#rdsm0 <- grid_canopy(nlas, res = 0.5, p2r())
hgtcol <- height.colors(40)
#plot(rdsm0, col=hgtcol)
plot(dtm, hgtcol)
# Normalized Digital surface Model (nDSM)
# Percobaan pertama
ROI207_nor <- lasnormalize(ROI207_data, dtm)
summary(ROI207_nor@data$Z)
# Percobaan Kedua memfilter elevasi dibawah 0
ROI207_0 <- lasfilter(ROI207_nor, Z >= 0 & Z <=50)
#ndsm <- grid_canopy(nlas2, res = 0.5, p2r())
#plot(ndsm, col=hgtcol)
ROI207_0
summary(ROI207_0@data$Z)
#filter(ROI41_nor@data, Z > 50) %>% nrow
#filter(ROI41_0@data, Z > 40) %>% nrow
#hist(ROI41_0@data$Z)
#hist(ROI41_nor@data$Z)
# p2r : point to raster
#r.ndsm <- grid_canopy(nlas2, res = 0.5, p2r(subcircle = 0.2, na.fill = kriging()))
#plot(r.ndsm, col=hgtcol)
# Canopy Hight Model (CHM)
clas <- lasfilter(ROI207_0)
cdsm <- grid_canopy(clas, res = 0.5, p2r(subcircle = 0.2, na.fill = tin ()))
plot(cdsm, col=hgtcol)
# Membuat sistem Projrksi
crs(cdsm) <- CRS("+init=epsg:32748")
writeRaster(cdsm, "H:/Wildfire_datasets/PROCESSING/CHM/CHM 0.5/ROI207_chm.tif", overwrite=TRUE)
CC <- function(z, hTree, rn, nr, cls)
{
hTree == 5
# return dari point clouds yang diduga bagian dari pohon
gTree <- (cls = 1) & (z >= hTree)
# All Return Canopy Indexs
arCanopy <- gTree & (z >= 0)
arTotal <- (z >= 0)
arci = sum(arCanopy) / sum(arTotal)
# First Return Canopy Indexs
srTotal <- (nr == 1)
srCanopy <- gTree & srTotal
frTotal <- (nr > 1) & (rn == 1)
frCanopy <- gTree & frTotal
frci = (sum(srCanopy) + sum(frCanopy)) / (sum(srTotal) + sum(frTotal))
# Return all indexs
return(list(ARCI = arci, FRCI = frci))
}
# get starting point to calculate CC ----
# load the flight line and grid
# load the flight line and grid
pline <- st_read("H:/Wildfire_datasets/PROCESSING/GRID/AOI_LiDAR.shp")
gline <- st_read("H:/Wildfire_datasets/PROCESSING/GRID/AOI-Grid21.shp")
# select which tile
plineROI207 = pline %>% filter(fname == "ROI207")
# select the grid
glineROI207 = gline[plineROI207, op=st_within]
# add ID for selection
glineROI207$gridID <- 1:nrow(glineROI207) # gile, langsung jadi sf
st_write(glineROI207, "H:/Wildfire_datasets/PROCESSING/GRID/gline/glineROI207_sf.shp")
# select the first grid
gROI207 = glineROI207 %>% filter(gridID == 1)
# extent
startX <- raster::extent(gROI207)[1]
startY <- raster::extent(gROI207)[3]
ccover = grid_metrics(ROI207_0, res=30, start = c(startX, startY),
func =  CC(Z, hTree = 5, ReturnNumber, NumberOfReturns, Classification))
plot(ccover$ARCI)
plot(ccover$FRCI)
plot(ccover)
head(ccover$ARCI)
#view(ccover$ARCI)
shp <- ccover %>%
rasterToPoints %>%
as.data.frame %>%
sf::st_as_sf(coords = c("x","y"), crs=32748)
write_sf(shp, "H:/Wildfire_datasets/PROCESSING/CANOPY COVER/CC_ROI207.shp", delete_layer = TRUE)
save.image("H:/Wildfire_datasets/PROCESSING/CANOPY COVER/HASIL/ROI207.RData")
# 4. load the data ----
ROI215 <- readLAS ("H:/Wildfire_datasets/PROCESSING/CLASSIFICATION/ROI215_CLASS.las")
# 5. Membaca metadata file las ----
ROI215
# 6. Menampilkan 3D data las
plot(ROI215)
# 7. Mengecek kualitas data las ----
lascheck(ROI215)
# Pengurangan Kerapatan point clouds dengan menggunakan beberapa algoritma ----
#ROI41_dec <- lasfilterdecimate(ROI41,
#algorithm = homogenize(density = 3L, res = 1))
#las.clip
#las.thin
#lascheck(ROI41_dec)
# Filtering point clouds yang double XYZ
ROI215_dup <- lasfilterduplicates(ROI215)
ROI215_data<- lasfilter(ROI215_dup, !duplicated(ROI215_dup@data, by = c("X", "Y")))
ROI215_dup
lascheck(ROI215_data)
unique(ROI215_data@data$Classification)
table(ROI215_data@data$Classification)
# Digital terrain Model (DTM)
dtm <- grid_terrain(ROI215_data, algorithm = kriging(k=10L), res = 0.5)
writeRaster(dtm, "H:/Wildfire_datasets/PROCESSING/DTM/ROI215_dtm.tif", overwrite=TRUE)
#rdsm0 <- grid_canopy(nlas, res = 0.5, p2r())
hgtcol <- height.colors(40)
#plot(rdsm0, col=hgtcol)
plot(dtm, hgtcol)
# Normalized Digital surface Model (nDSM)
# Percobaan pertama
ROI215_nor <- lasnormalize(ROI215_data, dtm)
summary(ROI215_nor@data$Z)
# Percobaan Kedua memfilter elevasi dibawah 0
ROI215_0 <- lasfilter(ROI215_nor, Z >= 0 & Z <=50)
#ndsm <- grid_canopy(nlas2, res = 0.5, p2r())
#plot(ndsm, col=hgtcol)
ROI215_0
summary(ROI215_0@data$Z)
#filter(ROI41_nor@data, Z > 50) %>% nrow
#filter(ROI41_0@data, Z > 40) %>% nrow
#hist(ROI41_0@data$Z)
#hist(ROI41_nor@data$Z)
# p2r : point to raster
#r.ndsm <- grid_canopy(nlas2, res = 0.5, p2r(subcircle = 0.2, na.fill = kriging()))
#plot(r.ndsm, col=hgtcol)
# Canopy Hight Model (CHM)
clas <- lasfilter(ROI215_0)
cdsm <- grid_canopy(clas, res = 0.5, p2r(subcircle = 0.2, na.fill = tin ()))
plot(cdsm, col=hgtcol)
# Membuat sistem Projrksi
crs(cdsm) <- CRS("+init=epsg:32748")
writeRaster(cdsm, "H:/Wildfire_datasets/PROCESSING/CHM/CHM 0.5/ROI215_chm.tif", overwrite=TRUE)
CC <- function(z, hTree, rn, nr, cls)
{
hTree == 5
# return dari point clouds yang diduga bagian dari pohon
gTree <- (cls = 1) & (z >= hTree)
# All Return Canopy Indexs
arCanopy <- gTree & (z >= 0)
arTotal <- (z >= 0)
arci = sum(arCanopy) / sum(arTotal)
# First Return Canopy Indexs
srTotal <- (nr == 1)
srCanopy <- gTree & srTotal
frTotal <- (nr > 1) & (rn == 1)
frCanopy <- gTree & frTotal
frci = (sum(srCanopy) + sum(frCanopy)) / (sum(srTotal) + sum(frTotal))
# Return all indexs
return(list(ARCI = arci, FRCI = frci))
}
# get starting point to calculate CC ----
# load the flight line and grid
# load the flight line and grid
pline <- st_read("H:/Wildfire_datasets/PROCESSING/GRID/AOI_LiDAR.shp")
gline <- st_read("H:/Wildfire_datasets/PROCESSING/GRID/AOI-Grid21.shp")
# select which tile
plineROI215 = pline %>% filter(fname == "ROI215")
# select the grid
glineROI215 = gline[plineROI215, op=st_within]
# add ID for selection
glineROI215$gridID <- 1:nrow(glineROI215) # gile, langsung jadi sf
st_write(glineROI215, "H:/Wildfire_datasets/PROCESSING/GRID/gline/glineROI215_sf.shp")
# select the first grid
gROI215 = glineROI215 %>% filter(gridID == 1)
# extent
startX <- raster::extent(gROI215)[1]
startY <- raster::extent(gROI215)[3]
ccover = grid_metrics(ROI215_0, res=30, start = c(startX, startY),
func =  CC(Z, hTree = 5, ReturnNumber, NumberOfReturns, Classification))
plot(ccover$ARCI)
plot(ccover$FRCI)
plot(ccover)
head(ccover$ARCI)
#view(ccover$ARCI)
shp <- ccover %>%
rasterToPoints %>%
as.data.frame %>%
sf::st_as_sf(coords = c("x","y"), crs=32748)
write_sf(shp, "H:/Wildfire_datasets/PROCESSING/CANOPY COVER/CC_ROI215.shp", delete_layer = TRUE)
save.image("H:/Wildfire_datasets/PROCESSING/CANOPY COVER/HASIL/ROI215.RData")
ROI214 <- readLAS ("H:/Wildfire_datasets/PROCESSING/CLASSIFICATION/ROI214_CLASS.las")
# 5. Membaca metadata file las ----
ROI214
# 6. Menampilkan 3D data las
plot(ROI214)
# 7. Mengecek kualitas data las ----
lascheck(ROI214)
# 8. Menampilkan nama atribut data las ----
#names(ROI41@data)
#head(ROI41@data)
#view(ROI41@data)
#head(las, 30) # --> jumlah data yang ingin ditampilkan
# 9. Menampilkan jumlah banyaknya data dalam kolom ----
#nrow(ROI41@data)
# 10. Mengecek klasifikasi data LiDAR
#unique(ROI41@data$Classification)
#table(ROI41@data$Classification)
# 11. Menghapus klasifikasi yg tdk diinginkan
#Line2_82 <- lasfilter(las, Classification < 7)
#unique(Line2_82@data$Classification)
#table(Line2_82@data$Classification)
# PREPROCESSING DATA LIDAR PROCESSING DATA LIDAR ----
# Clipping ----
#las.clip <- lasclipRectangle(Line2_82, xleft = 487035, ybottom = 9767785,xright = 487515, ytop = 9768055)
#plot(las.clip)
#lascheck(las.clip)
# Save las Data hasil clip ----
#writeLAS(las.clip, "las.clip.las")
# Pengurangan Kerapatan point clouds dengan menggunakan beberapa algoritma ----
#ROI41_dec <- lasfilterdecimate(ROI41,
#algorithm = homogenize(density = 3L, res = 1))
#las.clip
#las.thin
#lascheck(ROI41_dec)
# Filtering point clouds yang double XYZ
ROI214_dup <- lasfilterduplicates(ROI214)
ROI214_data<- lasfilter(ROI214_dup, !duplicated(ROI214_dup@data, by = c("X", "Y")))
ROI214_dup
lascheck(ROI214_data)
unique(ROI214_data@data$Classification)
table(ROI214_data@data$Classification)
# Digital terrain Model (DTM)
dtm <- grid_terrain(ROI214_data, algorithm = kriging(k=10L), res = 0.5)
writeRaster(dtm, "H:/Wildfire_datasets/PROCESSING/DTM/ROI214_dtm.tif", overwrite=TRUE)
#rdsm0 <- grid_canopy(nlas, res = 0.5, p2r())
hgtcol <- height.colors(40)
#plot(rdsm0, col=hgtcol)
plot(dtm, hgtcol)
# Normalized Digital surface Model (nDSM)
# Percobaan pertama
ROI214_nor <- lasnormalize(ROI214_data, dtm)
summary(ROI214_nor@data$Z)
# Percobaan Kedua memfilter elevasi dibawah 0
ROI214_0 <- lasfilter(ROI214_nor, Z >= 0 & Z <=50)
#ndsm <- grid_canopy(nlas2, res = 0.5, p2r())
#plot(ndsm, col=hgtcol)
ROI214_0
summary(ROI214_0@data$Z)
#filter(ROI41_nor@data, Z > 50) %>% nrow
#filter(ROI41_0@data, Z > 40) %>% nrow
#hist(ROI41_0@data$Z)
#hist(ROI41_nor@data$Z)
# p2r : point to raster
#r.ndsm <- grid_canopy(nlas2, res = 0.5, p2r(subcircle = 0.2, na.fill = kriging()))
#plot(r.ndsm, col=hgtcol)
# Canopy Hight Model (CHM)
clas <- lasfilter(ROI214_0)
cdsm <- grid_canopy(clas, res = 0.5, p2r(subcircle = 0.2, na.fill = tin ()))
plot(cdsm, col=hgtcol)
# Membuat sistem Projrksi
crs(cdsm) <- CRS("+init=epsg:32748")
writeRaster(cdsm, "H:/Wildfire_datasets/PROCESSING/CHM/CHM 0.5/ROI214_chm.tif", overwrite=TRUE)
CC <- function(z, hTree, rn, nr, cls)
{
hTree == 5
# return dari point clouds yang diduga bagian dari pohon
gTree <- (cls = 1) & (z >= hTree)
# All Return Canopy Indexs
arCanopy <- gTree & (z >= 0)
arTotal <- (z >= 0)
arci = sum(arCanopy) / sum(arTotal)
# First Return Canopy Indexs
srTotal <- (nr == 1)
srCanopy <- gTree & srTotal
frTotal <- (nr > 1) & (rn == 1)
frCanopy <- gTree & frTotal
frci = (sum(srCanopy) + sum(frCanopy)) / (sum(srTotal) + sum(frTotal))
# Return all indexs
return(list(ARCI = arci, FRCI = frci))
}
# get starting point to calculate CC ----
# load the flight line and grid
# load the flight line and grid
pline <- st_read("H:/Wildfire_datasets/PROCESSING/GRID/AOI_LiDAR.shp")
gline <- st_read("H:/Wildfire_datasets/PROCESSING/GRID/AOI-Grid21.shp")
# select which tile
plineROI214 = pline %>% filter(fname == "ROI214")
# select the grid
glineROI214 = gline[plineROI214, op=st_within]
# add ID for selection
glineROI214$gridID <- 1:nrow(glineROI214) # gile, langsung jadi sf
st_write(glineROI214, "H:/Wildfire_datasets/PROCESSING/GRID/gline/glineROI214_sf.shp")
# select the first grid
gROI214 = glineROI214 %>% filter(gridID == 1)
# extent
startX <- raster::extent(gROI214)[1]
startY <- raster::extent(gROI214)[3]
ccover = grid_metrics(ROI214_0, res=30, start = c(startX, startY),
func =  CC(Z, hTree = 5, ReturnNumber, NumberOfReturns, Classification))
plot(ccover$ARCI)
plot(ccover$FRCI)
plot(ccover)
head(ccover$ARCI)
#view(ccover$ARCI)
shp <- ccover %>%
rasterToPoints %>%
as.data.frame %>%
sf::st_as_sf(coords = c("x","y"), crs=32748)
write_sf(shp, "H:/Wildfire_datasets/PROCESSING/CANOPY COVER/CC_ROI214.shp", delete_layer = TRUE)
save.image("H:/Wildfire_datasets/PROCESSING/CANOPY COVER/HASIL/ROI214.RData")
ROI252 <- readLAS ("H:/Wildfire_datasets/PROCESSING/CLASSIFICATION/ROI252_CLASS.las")
# 5. Membaca metadata file las ----
ROI252
# 6. Menampilkan 3D data las
plot(ROI252)
# 7. Mengecek kualitas data las ----
lascheck(ROI252)
# 8. Menampilkan nama atribut data las ----
#names(ROI41@data)
#head(ROI41@data)
#view(ROI41@data)
#head(las, 30) # --> jumlah data yang ingin ditampilkan
# 9. Menampilkan jumlah banyaknya data dalam kolom ----
#nrow(ROI41@data)
# 10. Mengecek klasifikasi data LiDAR
#unique(ROI41@data$Classification)
#table(ROI41@data$Classification)
# 11. Menghapus klasifikasi yg tdk diinginkan
#Line2_82 <- lasfilter(las, Classification < 7)
#unique(Line2_82@data$Classification)
#table(Line2_82@data$Classification)
# PREPROCESSING DATA LIDAR PROCESSING DATA LIDAR ----
# Clipping ----
#las.clip <- lasclipRectangle(Line2_82, xleft = 487035, ybottom = 9767785,xright = 487515, ytop = 9768055)
#plot(las.clip)
#lascheck(las.clip)
# Save las Data hasil clip ----
#writeLAS(las.clip, "las.clip.las")
# Pengurangan Kerapatan point clouds dengan menggunakan beberapa algoritma ----
#ROI41_dec <- lasfilterdecimate(ROI41,
#algorithm = homogenize(density = 3L, res = 1))
#las.clip
#las.thin
#lascheck(ROI41_dec)
# Filtering point clouds yang double XYZ
ROI252_dup <- lasfilterduplicates(ROI252)
ROI252_data<- lasfilter(ROI252_dup, !duplicated(ROI252_dup@data, by = c("X", "Y")))
ROI252_dup
lascheck(ROI252_data)
unique(ROI252_data@data$Classification)
table(ROI252_data@data$Classification)
# Digital terrain Model (DTM)
dtm <- grid_terrain(ROI252_data, algorithm = kriging(k=10L), res = 0.5)
library(lidR)
ctg <- catalog(folder="H:/TNGHS/03. INPUT")
opt_cores(ctg) <- 2
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg) <- 800
opt_output_files(ctg) <- "H:/TNGHS/05. OUTPUT 2/Lidar_TNGHS{ID}"
newctg = catalog_retile(ctg)
library(lidR)
ctg <- catalog(folder="H:/TNGHS/03. INPUT")
opt_cores(ctg) <- 8
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg) <- 800
opt_output_files(ctg) <- "H:/TNGHS/05. OUTPUT 2/Lidar_TNGHS{ID}"
newctg = catalog_retile(ctg)
install.packages("tseries")
library(tseries)
install.packages("tseries")
library(tseries)
install.packages("tseries")
library(tseries)
data <- read.delim("clipboard")
keputusan.reg <- function(data){
data3 <- c("Band_1","Band_2","Band_3","Band_4","Band_5","Band_6","Band_7","Band_9")
data2 <- as.matrix(data)
r.square<- NULL
b0 <- NULL
b1 <- NULL
ceknormal <- NULL
heterokedastisitas <- NULL
kebebasan <- NULL
pengaruh <- NULL
data <- read.delim("clipboard")
adadad
dad
library(tseries)
data <- read.delim("clipboard")
keputusan.reg <- function(data){
data3 <- c("Band_1","Band_2","Band_3","Band_4","Band_5","Band_6","Band_7","Band_9")
data2 <- as.matrix(data)
r.square<- NULL
b0 <- NULL
b1 <- NULL
ceknormal <- NULL
heterokedastisitas <- NULL
kebebasan <- NULL
pengaruh <- NULL
#regresi sama normalitas
for(i in 1:8){
reg <- lm(data2[,1]~data2[,i+1])
sum <- summary(reg)
a <- sum$coefficients
tpvalue <- a[8]
pengaruh[i] <- if(tpvalue<0.05) paste("Berpengaruh") else paste("Tidak Berpengaruh")
ujinormal <- ks.test(resid(reg), pnorm, mean(resid(reg)), sd(resid(reg)))
ceknormal[i] <- if(ujinormal[2]<0.05) paste("Tidak Normal") else paste("Normal")
#uji heterokesi
glej <- summary(lm(abs(resid(reg))~data2[,i+1]))
ujiglej <- glej$coefficients[8]
heterokedastisitas[i] <- if(ujiglej<0.05) paste("Tidak Homogen") else paste("Homogen")
bebas <- runs.test(as.factor(sign(resid(reg))))
kebebasan[i] <- if(bebas[3]<0.05) paste("Tidak Saling Bobas") else paste("Saling Bebas")
r.square[i]<- as.numeric(round(sum$r.squared, digits=2))
model <- reg$coefficients
b0[i] <- as.numeric(round(model[1], digits=2))
b1[i] <- as.numeric(round(model[2], digits=2))
}
cbind(data3, r.square, pengaruh, b0, b1, ceknormal, heterokedastisitas, kebebasan)
}
# Separate multi band into single band
library(raster)
# Crop landsat
library(sf)
# shape <- shapefile("F:/My Drive/Shared TIF File/Forests2020/Yudi_test/2017/Pak YUDI/Gal2_20170606_TOA.tif")
# clip <- crop(p124r061, extent(shape))
raster_file <- brick("E:/00AllResult/Pak YUDI/Gal2_20170606_TOA.tif")
clip <- raster_file
# Melihat banyaknya layers
nlayers(clip)
for (i in 1:nlayers(clip)) {band<-clip[[i]]
writeRaster(band,paste("band",i, ".tif", sep = ""))
}
writeRaster(band, paste("names"(clip[[i]]),'.tif', sep=""))
band
i
# shape <- shapefile("F:/My Drive/Shared TIF File/Forests2020/Yudi_test/2017/Pak YUDI/Gal2_20170606_TOA.tif")
# clip <- crop(p124r061, extent(shape))
raster_file <- raster("E:/00AllResult/Pak YUDI/Gal2_20170606_TOA.tif")
clip <- raster_file
# Melihat banyaknya layers
nlayers(clip)
for (i in 1:nlayers(clip)) {band<-clip[[i]]
writeRaster(band,paste("band",i, ".tif", sep = ""))
}
# shape <- shapefile("F:/My Drive/Shared TIF File/Forests2020/Yudi_test/2017/Pak YUDI/Gal2_20170606_TOA.tif")
# clip <- crop(p124r061, extent(shape))
raster_file <- stack("E:/00AllResult/Pak YUDI/Gal2_20170606_TOA.tif")
clip <- raster_file
# Melihat banyaknya layers
nlayers(clip)
for (i in 1:nlayers(clip)) {band<-clip[[i]]
writeRaster(band,paste("band",i, ".tif", sep = ""))
}
library(sf)
library(raster)
raster_file <- brick("F:/My Drive/Shared TIF File/Forests2020/SAHID/FELLIKS/TESTING FILE/TIF TEST/LC08_125061_20170606.tif")
clip <- raster_file
## Save raster file after brick
setwd('F:/My Drive/Shared TIF File/Forests2020/SAHID/FELLIKS/TESTING FILE/TIF TEST/Brick Raster')
nlayers(clip)
for (i in 1:nlayers(clip)) {band <- clip[[i]]
writeRaster(band, paste("band",i, ".tif", sep = ""))
}
library(sf)
library(raster)
raster_file <- brick("F:/My Drive/Shared TIF File/Forests2020/Data Malta/3_RESEARCH_FELLIKS/Landsat GEE 2014/Clip_124061_New.tif")
clip <- raster_file
## Save raster file after brick
setwd('F:/My Drive/Shared TIF File/Forests2020/SAHID/FELLIKS/TESTING FILE/TIF TEST/Brick Raster 2')
nlayers(clip)
for (i in 1:nlayers(clip)) {band <- clip[[i]]
writeRaster(band, paste("band",i, ".tif", sep = ""))
}
